{
	"id": "CE92DCAF-1AB0-4A2C-914A-536B3F53B973",
	"seatbid": [{
		"bid": [{
			"id": "cde3a82b-edee-49c7-b76c-557f20305e3b",
			"impid": "903809B1-E42B-4532-BDA7-6439282AFBFB",
			"price": 0.15,
			"adm": "<!DOCTYPE html>\n<html>\n\n<body>\n<script src=\"mraid.js\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n// ==============================  MRAID INIT  ================================\nif (document.readyState === 'complete') {\n  readyCheck();\n} else {\n    window.addEventListener('load', readyCheck, false);\n}\n\nfunction readyCheck() {\n    if (window.MRAID_ENV) {\n        console.log('Version: ' + window.MRAID_ENV.version +\n            ' SDK: ' + window.MRAID_ENV.sdk +\n            ' SDKv: ' + window.MRAID_ENV.sdkVersion);\n    } else {\n        console.error('MRAID_ENV NOT FOUND');\n    }\n\n    var fakeMraid = {\n        addEventListener: function () {},\n        removeEventListener: function () {},\n        resize: function () {},\n        setResizeProperties: function () {},\n        getMaxSize: function () {\n            return {\n                width: 300,\n                height: 600\n            };\n        },\n        getState: function () {\n            return 'default'\n        },\n        expand: function () {}\n    };\n\n    logDiv = document.getElementById('resize_negative_tests_log');\n    logDiv.style = 'margin:10px';\n\n    var _mraid = window.mraid || fakeMraid;\n    console.log(\"window mraid \" + _mraid);\n\n    if (_mraid.getState() === 'loading') {\n        _mraid.addEventListener('ready', startTests(_mraid, () => {\n            console.log('[ALL NEGATIVE RESIZE TESTS FINISHED]')\n        }, 2000, logInfoOnUi, logErrorOnUi));\n    } else {\n        // You can specify done function, timeout (for how long to wait for events), log and error functions\n        startTests(_mraid, () => {\n            console.log('[ALL NEGATIVE RESIZE TESTS FINISHED]')\n        }, 2000, logInfoOnUi, logErrorOnUi);\n    }\n}\n\nvar logDiv;\n\nfunction logOnUi(color, message) {\n    var messageDiv = document.createElement('div');\n    messageDiv.innerText =  '[' + new Date().toLocaleString() + '] ' + message;\n    messageDiv.style = 'width:100%;padding: 10px 0px;padding-right:10px;color:' + color;\n    logDiv.appendChild(messageDiv);\n}\n\nfunction logInfoOnUi(message) {\n    logOnUi('dodgerblue', message);\n    console.log(message);\n}\n\nfunction logErrorOnUi(message) {\n    logOnUi('tomato', message);\n    console.error(message);\n}\n\n// ============================================================================\nfunction runTests() {\n  startTests(_mraid, () => {\n            console.log('[ALL NEGATIVE RESIZE TESTS FINISHED]')\n        }, 2000, logInfoOnUi, logErrorOnUi);\n}\n/**\n * Sequentially executes resize negative tests - see TESTS region. Covers cases when 'error' event must be fired.\n *\n * @param mraid MRAID instance to use.\n * @param done Callback function, executed once all tests ran.\n * @param waitTimeout How long to wait for events.\n * @param log Callback that should get log strings.\n * @param error  Callback that receives error strings.\n */\nfunction startTests(mraid, done, waitTimeout, log, error) {\n\nconsole.log(\"startTests \" + mraid);\n    this.error = error || console.error;\n    this.log = log || console.log;\n\n    var resizeErrorEventTests = [{\n            test: resizeWithoutSetSize,\n            description: 'Resizing without setting size properties first should trigger an error.'\n        },\n        {\n            test: resizeBeforeSetSize,\n            description: 'Resizing before setting size properties first should trigger an error.'\n        }\n    ];\n\n    var setResizePropertiesTests = [{\n            test: setUndefinedResizeProperties,\n            description: 'Calling setResizeProperties with undefined size properties should trigger an error.'\n        },\n        {\n            test: setEmptyResizeProperties,\n            description: 'Calling setResizeProperties without actual size properties should trigger an error.'\n        },\n        {\n            test: setIncompleteResizeProperties,\n            description: 'Calling setResizeProperties with incomplete list of required size properties should trigger an error.'\n        },\n        {\n            test: setInvalidResizeProperties,\n            description: 'Calling setResizeProperties with invalid size properties should trigger an error.'\n        },\n        {\n            test: setInvalidResizeProperties,\n            description: 'Setting ad size less than 50x50 should trigger an error.'\n        },\n        {\n            test: setTooLargeSizeResizeProperties,\n            description: 'Setting size more than the ad max size should trigger an error.'\n        },\n        {\n            test: setCloseButtonZoneOffscreenOffsetX,\n            description: 'Setting offsetX that moves close button offscreen should trigger an error.'\n        },\n        {\n            test: setCloseButtonZoneOffscreenOffsetY,\n            description: 'Setting offsetY that moves close button offscreen should trigger an error.'\n        },\n        {\n            test: setCloseButtonZoneOffscreenOffsetXY,\n            description: 'Setting offsetX and offsetY that moves close button partially offscreen should trigger an error.'\n        },\n        {\n            test: setCloseButtonZoneOffscreenWidth,\n            description: 'Setting width that moves close button offscreen should trigger an error.'\n        }\n    ];\n\n    var expandedStateResizeErrorEventTests = [{\n        test: resizeInExpandedStateTest,\n        description: 'Resizing in expanded state should trigger an error.'\n    }];\n\n    var resizeErrorEventTester = new EventTester(resizeErrorEventTests, 'error', 'Error events generated by resize.', mraid, waitTimeout, log, error);\n    var setResizePropertiesErrorEventTester = new EventTester(setResizePropertiesTests, 'error', 'Error events generated by setResizeProperties.', mraid, waitTimeout, log, error);\n    var expandedStateResizeErrorEventTester = new EventTester(expandedStateResizeErrorEventTests, 'error', 'Error events generated by resize in expanded state', mraid, waitTimeout, log, error);\n\n    // these tests can be run in 'default state'\n    var sequentialRunner = new SequentialRunner([resizeErrorEventTester, setResizePropertiesErrorEventTester]);\n    sequentialRunner.run(continueInExpandedState);\n\n    function continueInExpandedState() {\n        mraid.addEventListener('stateChange', stateChange);\n        mraid.expand();\n        var wait = setTimeout(function () {\n            mraid.removeEventListener('stateChange', stateChange);\n            error('Failed to set expanded state.');\n            if (done) {\n                done();\n            }\n        }, waitTimeout);\n\n        function stateChange() {\n            clearTimeout(wait);\n            mraid.removeEventListener('stateChange', stateChange);\n            // this should be run once state changed to 'expanded'\n            expandedStateResizeErrorEventTester.start(done);\n        }\n    }\n}\n\n// =================================  TESTS  ==================================\nfunction resizeWithoutSetSize(mraid) {\n    mraid.resize();\n}\n\nfunction resizeBeforeSetSize(mraid) {\n    mraid.resize();\n    mraid.setResizeProperties({\n        width: 100,\n        height: 100,\n        offsetX: 0,\n        offsetY: 0\n    });\n}\n\nfunction setUndefinedResizeProperties(mraid) {\n    mraid.setResizeProperties();\n}\n\nfunction setEmptyResizeProperties(mraid) {\n    mraid.setResizeProperties({});\n}\n\nfunction setIncompleteResizeProperties(mraid) {\n    mraid.setResizeProperties({\n        width: 100\n    });\n}\n\nfunction setInvalidResizeProperties(mraid) {\n    mraid.setResizeProperties({\n        width: 'string',\n        height: 'string',\n        offsetX: 'string',\n        offsetY: 'string'\n    });\n}\n\nfunction setTooSmallWidthAndHeightResizeProperties(mraid) {\n    mraid.setResizeProperties({\n        width: 25,\n        height: 25,\n        offsetX: 0,\n        offsetY: 0\n    });\n}\n\nfunction setTooLargeSizeResizeProperties(mraid) {\n    var maxSize = mraid.getMaxSize();\n    var props = {\n        width: maxSize.width + 10,\n        height: maxSize.height + 10,\n        offsetX: -5,\n        offsetY: -5,\n        allowOffscreen: false\n    };\n    mraid.setResizeProperties(props);\n}\n\nfunction setCloseButtonZoneOffscreenOffsetX(mraid) {\n    var maxSize = mraid.getMaxSize();\n    var props = {\n        width: maxSize.width,\n        height: maxSize.height,\n        offsetX: 50,\n        offsetY: 0,\n        allowOffscreen: true\n    };\n    mraid.setResizeProperties(props);\n    mraid.resize();\n}\n\nfunction setCloseButtonZoneOffscreenOffsetY(mraid) {\n    var maxSize = mraid.getMaxSize();\n    var props = {\n        width: maxSize.width,\n        height: maxSize.height,\n        offsetX: 0,\n        offsetY: -50,\n        allowOffscreen: true\n    };\n    mraid.setResizeProperties(props);\n    mraid.resize();\n}\n\nfunction setCloseButtonZoneOffscreenOffsetXY(mraid) {\n    var maxSize = mraid.getMaxSize();\n    var props = {\n        width: maxSize.width,\n        height: maxSize.height,\n        offsetX: 25,\n        offsetY: -25,\n        allowOffscreen: true\n    };\n    mraid.setResizeProperties(props);\n    mraid.resize();\n}\n\nfunction setCloseButtonZoneOffscreenWidth(mraid) {\n    var maxSize = mraid.getMaxSize();\n    var props = {\n        width: maxSize.width + 50,\n        height: maxSize.height,\n        offsetX: 0,\n        offsetY: 0,\n        allowOffscreen: true\n    };\n    mraid.setResizeProperties(props);\n}\n\nfunction resizeInExpandedStateTest(mraid) {\n    if (mraid.getState() !== 'expanded') {\n        throw 'Expanded state required for this test (resizeInExpandedStateTest).';\n    }\n    mraid.setResizeProperties({\n        width: 100,\n        height: 100,\n        offsetX: 0,\n        offsetY: 0\n    });\n    mraid.resize();\n}\n// ============================================================================\n\n// ================================ HELPER TYPES ==============================\nfunction SequentialRunner(eventTesters) {\n    this.eventTesters = eventTesters;\n    this.current = 0;\n\n    SequentialRunner.prototype.run = (done) => {\n        if (this.eventTesters && this.current < this.eventTesters.length) {\n            this.eventTesters[this.current].start(() => this.run(done));\n        } else {\n            if (done) {\n                done();\n            }\n        }\n        this.current++;\n    }\n}\n\nfunction EventTester(tests, event, description, mraid, waitInterval, log, error) {\n    this.tests = tests;\n    this.description = description;\n    this.mraid = mraid;\n    this.waitInterval = waitInterval || 5000;\n    this.log = log || console.log;\n    this.error = error || console.error;\n    this.index = 0;\n    this.event = event;\n    console.log(\"@mraid \" + this.event + \" \" + this.mraid);\n\n    EventTester.prototype.current = function () {\n        return this.tests[this.index];\n    };\n    EventTester.prototype.hasNext = function () {\n        return this.index < this.tests.length;\n    };\n    EventTester.prototype.moveNext = function () {\n        this.index++;\n    };\n    EventTester.prototype.start = function (complete) {\n        this.complete = complete;\n        this.index = 0;\n        this.log('Starting: [' + this.description + ']');\n        this.run();\n    };\n    EventTester.prototype.done = function (err, test) {\n        test.err = err;\n        if (err) {\n            this.error('FAILED: [' + test.description + '], error: [' + err + ']');\n        } else {\n            this.log('PASSED: [' + test.description + ']');\n        }\n        this.run();\n    };\n    EventTester.prototype.run = function () {\n        if (this.hasNext()) {\n            var test = this.current();\n            try {\n                this.testEvent(test, this.done, this.index);\n            } catch (err) {\n                console.log(err);\n                this.error('Error in test:' + ' ' + err + ', ' + (err && err.message));\n            }\n            this.moveNext();\n        } else {\n            this.log('Finished: [' + this.description + ']');\n            if (this.complete) {\n                this.complete();\n            }\n        }\n    };\n    EventTester.prototype.testEvent = function (test) {\n        var handler = () => {\n            clearTimeout(wait);\n            this.mraid.removeEventListener(this.event, handler);\n            setTimeout(() => this.done(undefined, test), 100);\n        };\n\n        this.mraid.addEventListener(this.event, handler);\n\n        setTimeout(() => test.test(this.mraid));\n\n        var wait = setTimeout(() => {\n            this.mraid.removeEventListener(this.event, handler);\n            clearTimeout(wait);\n            this.done('Event \"' + event + '\" was not fired.', test);\n        }, this.waitInterval);\n    }\n}\n// ============================================================================\n</script>\n<div id=\"resize_negative_tests_log\"></div>\n</body>\n\n</html><script type=\"text/javascript\">\n(function(){\n  var supportMraid = window.mraid;\n  var isMraid = false;\n  document.querySelectorAll('script').forEach(function(item) {\n    if (item.src.match('mraid.js')) isMraid = true;\n  });  \n  if (supportMraid && isMraid) {\n    mraid.isViewable() ? track() : mraid.addEventListener('viewableChange', function() {\n      mraid.isViewable() && track();\n    });\n  } else if (!isMraid) track();\n\n  function track() {\n    var pixel = new Image();\n    pixel.src = 'https://10.0.2.2:8000/win/prebid?p=FIRST&t=2DAABBgABAAECAAIBAAsAAgAAAJscGAo3dmxuUHIzWmd2HBast5K-jPPz1JIBFqftitColIe1wwEAHBbx2I2hgvWrnGQWiYf9_Jug1ZORAQAWoMSk9wsVBgAsHBUCABwVAgAAHCbYhJaFBBUOFQQmuKHxgwQWoICcgATWrAIAHCaew6CABBaEovGDBBbchJaFBBbahJaFBBUUHBT0AxTYBAAVBBUIFqwCJqwCRQgAAAA&ph=a51065ab-17ee-4394-b5a7-32debc04780a';\n    track = function(){};\n  }\n})();\n</script>\n",
			"crid": "542294318",
			"w": 300,
			"h": 250,
			"ext": {
				"prebid": {
					"cache": {
						"key": "",
						"url": "",
						"bids": {
							"url": "prebid.openx.net/cache?uuid=4e6bdd1a-62cf-438e-9fe6-62b119d0c0c3",
							"cacheId": "4e6bdd1a-62cf-438e-9fe6-62b119d0c0c3"
						}
					},
					"targeting": {
						"hb_bidder": "openx",
						"hb_bidder_openx": "openx",
						"hb_cache_host": "prebid.openx.net",
						"hb_cache_host_openx": "prebid.openx.net",
						"hb_cache_id": "4e6bdd1a-62cf-438e-9fe6-62b119d0c0c3",
						"hb_cache_id_openx": "4e6bdd1a-62cf-438e-9fe6-62b119d0c0c3",
						"hb_cache_path": "/cache",
						"hb_cache_path_openx": "/cache",
						"hb_env": "mobile-app",
						"hb_env_openx": "mobile-app",
						"hb_pb": "0.10",
						"hb_pb_openx": "0.10",
						"hb_size": "300x250",
						"hb_size_openx": "300x250"
					},
					"type": "banner"
				}
			}
		}],
		"seat": "openx"
	}],
	"cur": "USD",
	"ext": {
		"responsetimemillis": {
			"openx": 49
		}
	}
}
