{
	"id": "B12892E7-3924-4B15-A929-BC7D1792671B",
	"seatbid": [{
		"bid": [{
			"id": "fa035a8e-b577-4b1a-985d-92d36ad1a725",
			"impid": "0485132B-4FF9-48C0-8D1B-EF8207988459",
			"price": 0.15,
			"adm": "<script src=\"https://s3-us-west-2.amazonaws.com/omsdk-files/compliance-js/omid-validation-verification-script-v1.js\"></script>\n<script type=\"text/javascript\" src=\"mraid.js\" onerror=\"console.log('mraid.js not found');\"></script>\n<script type=\"text/javascript\">\n/* logging helpers */\n\n// global variables help identify log output\nvar DEBUG = 1,\n    INFO = 2,\n    ERR = 3;\n\n// $log.it is replacement for console.out\n// supports mirroring output to window.alert, reducing log output by level\n$log = {\n    logLevel : 2,                  //set to reduce output, 0 = all\n    useAlert : false,              //toggle to also output to window.alert\n    preface  : 'logit',            //set to preface all output by $log.it\n\n\n/**\n* $log.it is a replacement for console.out\n* @namespace $log\n* @method it\n* @param {String} msg : message to output to console\n* @param {Number} level : log level for this message\n*/\n    it : function (msg, level) {\n\n        /** @private, toIsoDate converts date/time to ISO format */\n        function toIsoDate(d) {\n            function pad(n) {\n                return n < 10 ? '0' + n : n;\n            }\n            var s = d.getUTCFullYear() + '-'\n                + pad(d.getUTCMonth() + 1) + '-'\n                + pad(d.getUTCDate()) + 'T'\n                + pad(d.getUTCHours()) + ':'\n                + pad(d.getUTCMinutes()) + ':'\n                + pad(d.getUTCSeconds()) + 'Z';\n            return s;\n        }\n\n        /** @private, s is the string value to hold the modified message */\n        var s = '';\n\n        // provide a default level if none provided\n        if (!level) {\n            level = DEBUG;\n        }\n\n        // only output message if level exceeds logLevel property\n        if (level > $log.logLevel) {\n            s = $log.preface + '(' + level + ')-' + toIsoDate(new Date()) + ':' + msg;\n            console.log(s);\n\n            // also send message to alert dialogue if useAlert is set\n            if ($log.useAlert) {\n                alert(s);\n            }\n        }\n    }\n};\n\n/* timers */\n\n// timer namespace holds each instance of the timers \n//   Each timer is identified by a DOM element name.\n//   When the timer is updated, it automatically populates that DOM element\n//     with a count-up timer value in mm:ss:xx (minutes, seconds, hundreths of seconds).\n$timer = {\n\n    /* local storage for timer instances */\n    instance : [],\n\n    /**\n    * init instantiates the count-up timer for the given id with elapsed time of 0 seconds\n    * @namespace $timer\n    * @method init\n    * @param id string identifier for this timer -- should match a DOM element name\n    */\n    init : function (id) {\n        $timer.instance[id] = {\n            elapsed : 0\n        };\n        return $timer.instance[id].elapsed;\n    },\n\n    /**\n    * updateDisplay updates the DOM of the given id with the elapsed time of the timer with the same id\n    * @namespace $timer\n    * @method updateDisplay\n    * @param id string identifier for this timer which also matches a DOM element name\n    */\n    updateDisplay : function (id) {\n        var display = '00:00:00',\n            el = document.getElementById(id),\n            elapsed,\n            minutes,\n            seconds,\n            tenths;\n\n        //formatting\n        if ($timer.instance[id]) {\n            elapsed = $timer.instance[id].elapsed;\n            minutes = Math.floor(elapsed / (60 * 1000));\n            seconds = Math.floor((elapsed - (minutes * (60 * 1000))) / 1000);\n            tenths = Math.floor((elapsed - (minutes * (60 * 1000)) - (seconds * 1000)) / 10);\n\n            if (minutes < 10) {\n                minutes = '0' + minutes;\n            }\n            if (seconds < 10) {\n                seconds = '0' + seconds;\n            }\n            if (tenths < 10) {\n                tenths  = '0' + tenths;\n            }\n            display = minutes + ':' + seconds + ':' + tenths;\n        } else {\n            $log.it(\"ERR timer instance '\" + id + \"'' not found.\", ERR);\n        }\n\n        if (el) {\n            el.innerHTML = display;\n        } else {\n            $log.it(\"ERR element '\" + id + \"'' not found.\", ERR);\n        }\n\n        return display;\n    },\n\n    /**\n    * start begins or restarts the count-up timer with the given id\n    * @namespace $timer\n    * @method start\n    * @param id string identifier for timer to begin\n    */\n    start : function (id) {\n        if ($timer.instance[id]) {\n            $log.it(\"start timer instance \" + id, DEBUG);\n            $timer.instance[id].interval = setInterval(function () {\n                $timer.instance[id].elapsed += 10;\n                $timer.updateDisplay(id);\n            }, 10);\n        } else {\n            $log.it(\"ERR timer instance '\" + id + \"'' not found.\", ERR);\n        }\n        return id;\n    },\n\n    /**\n    * stop stops the count-up timer with the given id\n    * @namespace $timer\n    * @method stop\n    * @param id string identifier for timer to stop\n    */\n    stop : function (id) {\n        if ($timer.instance[id]) {\n            $log.it(\"stop timer instance \" + id, DEBUG);\n            clearInterval($timer.instance[id].interval);\n        } else {\n            $log.it(\"ERR timer instance '\" + id + \"'' not found.\", ERR);\n        }\n        return id;\n    }\n}\n\n\n// $mraid is a wrapper for mraid\n// all mraid methods are protected with try/catch blaocks to help report expected errors\n// methods are limited to only those used in this tester\n$mraid = {\n\n/**\n* addEventListener is a wrapper for mraid.addEventListener\n* @namespace $mraid\n* @method addEventListener\n*/\n    addEventListener : function (evt, listener) {\n        $log.it('$mraid.addEventListener', DEBUG);\n        try {\n            mraid.addEventListener(evt, listener);\n            $log.it('mraid.addEventListener(' + evt + ')', INFO);\n        } catch (e) {\n            $log.it('ERR calling addEventListener for ' + evt + ', ' + e.message, ERR);\n            $tester.errorListener(e.message, 'addEventListener');\n        }\n    },\n\n/**\n* isViewable is a wrapper for mraid.isViewable\n* @namespace $mraid\n* @method isViewable\n*/\n    isViewable : function () {\n        $log.it('$mraid.isViewable', DEBUG);\n        try {\n            var v = mraid.isViewable();\n            $log.it('mraid.isViewable()', INFO);\n            return v;\n        } catch (e) {\n            $log.it('ERR calling isViewable' + ', ' + e.message, ERR);\n            $tester.errorListener(e.message, 'isViewable');\n        }\n    },\n\n/**\n* getState is a wrapper for mraid.getState\n* @namespace $mraid\n* @method getState\n*/\n    getState : function () {\n        $log.it('$mraid.getState', DEBUG);\n        try {\n            var s = mraid.getState();\n            $log.it('mraid.getState()', INFO);\n            return s;\n        } catch (e) {\n            $log.it('ERR calling getState' + ', ' + e.message, ERR);\n            $tester.errorListener(e.message, 'getState');\n        }\n    }\n};\n\n/////////////////////////////////////////////////////////////////////\n// $tester object-class contains all the script to exercise the tests\n// it defines the onclick methods which start each test\n// use the .init() method to initialize the logging\n\n$tester = {\n/**\n* init is the public method to start the tester\n*   it turns on logging, checks for mraid, and attaches the click event listeners\n*\n* @param {boolean} isAlertOn set to true to echo all console output to alert dialogs\n* @param {Numeric} logLevel use the globals DEBUG, WARN, ERR to limit the console output by excluding that level, 0=ALL\n* @param {String} logPreface identify all the log output with this preface string \n* @namespace $tester\n* @method init\n*/\n    init : function (isAlertOn, logLevel, logPreface) {\n\n        //turn on logging\n        $log.useAlert = isAlertOn;\n        $log.logLevel = logLevel;\n        $log.preface = logPreface;\n        $log.it('init', DEBUG);\n\n        //confirm that mraid is available\n        switch ($mraid.getState()) {\n        case 'default':\n            //mraid available and ready\n            $log.it('mraid state is ready', INFO);\n\n            //prepare listeners\n            $mraid.addEventListener('error', $tester.errorListener);\n            $mraid.addEventListener('viewableChange', $tester.viewableListener);\n\n            //start instances based on initial viewability\n            $timer.init('onscreentimer');\n            $timer.init('offscreentimer');\n            $tester.viewableListener($mraid.isViewable());\n            break;\n        case 'loading':\n            //mraid not yet available, register a listener and try again\n            $mraid.addEventListener('ready', $tester.init);\n            $log.it('?? mraid state is not ready, using listener to wait for ready state', INFO);\n            return;\n        default:\n            //mraid state is unknown\n            $log.it('ERR mraid state is not recognized - tests cannot continue', ERR);\n        }\n\n    },\n\n/**\n* viewableListener is the generic listener for the mraid 'viewableChange' event to start and stop the right timers\n* @namespace $tester\n* @method viewableListener\n*/\n    viewableListener : function (viewableState) {\n        $log.it('viewable changed to: ' + viewableState + \" (\" + typeof(viewableState) + \")\", INFO);\n        if (viewableState) {\n            $log.it('Use only the ON screen timer', DEBUG);\n            $timer.stop('offscreentimer');\n            $timer.start('onscreentimer');\n        } else {\n            $log.it('Use only the OFF screen timer', DEBUG);\n            $timer.stop('onscreentimer');\n            $timer.start('offscreentimer');\n        }\n    },\n\n/**\n* errorListener is the generic listener for the mraid 'error' event to report info to the console, and reset the ad as needed\n* @namespace $tester\n* @method errorListener\n*/\n    errorListener : function (msg, action) {\n        //output the error message\n        $log.it('ERR mraid error caught from ' + action + ': ' + msg, ERR);\n    },\n\n};\n</script>\n\n<style type=\"text/css\">\n\thtml, body {\n\t\theight: 100%;\n        margin: 0px;\n\t}\n\n\t#fill-wrapper {\n\t\tmin-height: 100%; \n        background-color: red;\n\t}\n\n    #center-wrapper {\n        width: 250px;\n        height: 44px;\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 2px;\n        bottom: 0;\n        margin: auto;\n\n        max-width: 100%;\n        max-height: 100%;\n        overflow: auto;\n\n    }\n\n    .timer {\n        text-align: center;\n        background-color: white;\n        border: 1px solid black;\n        font-family: Courier;\n        font-size: 13px;\n        height: 20px;\n    }\n</style>\n\n<div id=\"fill-wrapper\">\n    <div id=\"center-wrapper\">\n        <div class=\"timer\">Off screen timer: <span id=\"offscreentimer\">00:00:00</span></div>\n\n        <div class=\"timer\">On screen timer: &nbsp;<span id=\"onscreentimer\">00:00:00</span></div>\n    </div>\n</div>\n\n<script type=\"text/javascript\">\n/* initialize manually to simulate ad environments where document ready events may have already fired */\n    $tester.init(false, 0, 'FullPageTester');\n</script><script type=\"text/javascript\">\n(function(){\n  var supportMraid = window.mraid;\n  var isMraid = false;\n  document.querySelectorAll('script').forEach(function(item) {\n    if (item.src.match('mraid.js')) isMraid = true;\n  });  \n  if (supportMraid && isMraid) {\n    mraid.isViewable() ? track() : mraid.addEventListener('viewableChange', function() {\n      mraid.isViewable() && track();\n    });\n  } else if (!isMraid) track();\n\n  function track() {\n    var pixel = new Image();\n    pixel.src = 'https://10.0.2.2:8000/win/prebid?p=FIRST&t=2DAABBgABAAECAAIBAAsAAgAAAJocGApGcThyMkpLVExOHBaN-d2qsMnY2cYBFuHy9aWMvqSQqgEAHBbL08WoqdzS_AsWtePy0pLLtqLPAQAWwrSZ9wsVBgAsHBUCABwVAgAAHCakoJWFBBUOFQQmuKHxgwQWoICcgATWrAIAHCaew6CABBaEovGDBBa8oJWFBBaqoJWFBBUUHBRkFIAFABUEFQgWrAImrAJFCAAAAA&ph=a51065ab-17ee-4394-b5a7-32debc04780a';\n    track = function(){};\n  }\n})();\n</script>\n",
			"crid": "542287902",
			"w": 320,
			"h": 50,
			"ext": {
				"prebid": {
					"cache": {
						"key": "",
						"url": "",
						"bids": {
							"url": "prebid.openx.net/cache?uuid=0faa9308-16a4-4383-8867-ce444c1942f6",
							"cacheId": "0faa9308-16a4-4383-8867-ce444c1942f6"
						}
					},
					"targeting": {
						"hb_bidder": "openx",
						"hb_bidder_openx": "openx",
						"hb_cache_host": "prebid.openx.net",
						"hb_cache_host_openx": "prebid.openx.net",
						"hb_cache_id": "0faa9308-16a4-4383-8867-ce444c1942f6",
						"hb_cache_id_openx": "0faa9308-16a4-4383-8867-ce444c1942f6",
						"hb_cache_path": "/cache",
						"hb_cache_path_openx": "/cache",
						"hb_env": "mobile-app",
						"hb_env_openx": "mobile-app",
						"hb_pb": "0.10",
						"hb_pb_openx": "0.10",
						"hb_size": "320x50",
						"hb_size_openx": "320x50"
					},
					"type": "banner"
				}
			}
		}],
		"seat": "openx"
	}],
	"cur": "USD",
	"ext": {
		"responsetimemillis": {
			"openx": 45
		}
	}
}
